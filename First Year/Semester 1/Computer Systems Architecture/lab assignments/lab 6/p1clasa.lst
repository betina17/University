     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13                                      ; ...
    14 00000000 78567F12CDABCDAB            s dd 127F5678h, 0ABCDABCDh
    15 00000008 00000000                    d dd 0
    16                                  ; our code starts here
    17                                  segment code use32 class=code
    18                                      start:
    19                                      ;TASK
    20                                      ;An array with doublewords containing packed data (4 bytes written as a single doubleword) is given. Write an asm program in order to obtain a new array of ;doublewords, where each doubleword will be composed by
    21                                          ; ...
    22 00000000 BE[00000000]                    mov esi, s
    23 00000005 BF[08000000]                    mov edi, d
    24 0000000A B300                            mov bl, 0 ;sum of bytes from odd posititons
    25 0000000C B100                            mov cl, 0 ;sum of bytes from even positions
    26 0000000E AC                              lodsb ;al=primul byte din s, care e pe poz para, adica 0
    27 0000000F 00C1                            add cl, al
    28 00000011 AC                              lodsb ; al=al doilea byte din s, care e pe poz impara, adica 1
    29 00000012 00C3                            add bl, al
    30 00000014 AC                              lodsb ;al=al treilea byte din s, care e pe poz para, adica 2
    31 00000015 00C1                            add cl, al
    32 00000017 AC                              lodsb ;al=al patrulea byte din s, de pe poz impara, adica 3
    33 00000018 00C3                            add bl, al
    34                                          
    35                                          
    36                                          ;daca tinem cont de little endian, primul 
    37                                          ; exit(0)
    38 0000001A 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    39 0000001C FF15[00000000]                  call    [exit]       ; call exit to terminate the program
