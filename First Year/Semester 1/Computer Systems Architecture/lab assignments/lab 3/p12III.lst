     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13                                      ; ...
    14 00000000 02                          a db 2
    15 00000001 0300                        b dw 3
    16 00000003 05                          c db 5
    17 00000004 04000000                    d dd 4
    18 00000008 0600000000000000            x dq 6
    19                                      
    20                                  ; our code starts here
    21                                  segment code use32 class=code
    22                                      start:
    23                                          ; (a*b+2)/(a+7-c)+d+x; a,c-byte; b-word; d-doubleword; x-qword unsigned
    24 00000000 A0[00000000]                    mov al, [a]
    25 00000005 B400                            mov ah, 0 ;ax=a
    26 00000007 668B1D[01000000]                mov bx, [b]
    27 0000000E 66F7E3                          mul bx 
    28 00000011 6683C002                        add ax, 2 ;ax=a*b+2
    29 00000015 8A1D[00000000]                  mov bl, [a]
    30 0000001B 80C307                          add bl, 7
    31 0000001E 2A1D[03000000]                  sub bl, [c]
    32 00000024 B700                            mov bh, 0 ;bx=
    33 00000026 B700                            mov bh, 0 ;bx=a+7-c 
    34 00000028 66F7F3                          div bx ;ax=(a*b+2)/(a+7-c)=2
    35 0000002B 6650                            push ax
    36 0000002D B800000000                      mov eax, 0
    37 00000032 6658                            pop ax ;eax=(a*b+2)/(a+7-c)=2
    38 00000034 0305[04000000]                  add eax, [d] ;=6
    39 0000003A BA00000000                      mov edx, 0
    40 0000003F F8                              clc
    41 00000040 0305[08000000]                  add eax, [x];=12
    42 00000046 1315[0C000000]                  adc edx, [x+4]
    43                                          
    44                                          
    45                                          
    46                                          
    47                                          
    48                                      
    49                                          ; exit(0)
    50 0000004C 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    51 0000004E FF15[00000000]                  call    [exit]       ; call exit to terminate the program
