     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit, printf, scanf               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                  import printf msvcrt.dll
    10                                  import scanf msvcrt.dll        ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    11                                  
    12                                  ; our data is declared here (the variables needed by our program)
    13                                  segment data use32 class=data
    14                                      ;...
    15 00000000 00000000                    a dd 0
    16                                      
    17 00000004 61203D203C25643E20-         message db "a = <%d> (base 10), a = <%x> (base 16)", 0  ;cu d afisez val in baza 10, cu x afisez val in baza 16
    17 0000000D 286261736520313029-
    17 00000016 2C2061203D203C2578-
    17 0000001F 3E2028626173652031-
    17 00000028 362900             
    18 0000002B 256400                      format db "%d", 0 ;o sa citesc o singura valoare
    19                                      
    20                                  ; our code starts here
    21                                  segment code use32 class=code
    22                                      start:
    23                                          ; A negative number a (a: dword) is given. Display the value of that number in base 10 and in the base 16 in the following format: "a = <base_10> (base 10), a = <base_16> (base 16)"
    24 00000000 68[00000000]                    push dword a 
    25 00000005 68[2B000000]                    push dword format
    26 0000000A FF15[00000000]                  call [scanf]       
    27 00000010 83C408                  		add esp, 4 * 2 
    28                                          
    29 00000013 8B1D[00000000]                  mov ebx, [a] ;pt ca am nevoie sa afisez 2 numere, dar care sa fie acelasi nr, doar ca in baze diferite, copiez a in ebx, si dau
    30                                                          ;push si la a si la ebx, ca sa le afisez
    31 00000019 FF35[00000000]                  push dword [a]
    32 0000001F 53                              push dword ebx
    33 00000020 68[04000000]                    push message
    34 00000025 FF15[00000000]                  call [printf]
    35 0000002B 83C40C                          add esp, 4*3
    36                                          ; exit(0)
    37 0000002E 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    38 00000030 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
